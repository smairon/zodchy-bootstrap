import zodchy_fastapi
import zodchy_notations
import zodchy_patterns
from fastapi.exceptions import RequestValidationError

import specs
from . import (
    routes,
    contracts,
    middleware,
)


def picker(stream) -> zodchy_patterns.events.HttpEvent | None:
    data = None
    for event in filter(lambda x: isinstance(x, zodchy_patterns.events.HttpEvent), stream):
        data = event
        if isinstance(event, zodchy_patterns.events.HttpError):
            break
    return data


def api(
    cqrs_factory: specs.services.CQRSFactoryContract{% if need_authentication %},
    jwt_secret: str{%endif}
) -> contracts.Application:
    api_app = contracts.Application()
    api_app = _bootstrap_exception_handlers(api_app)
    api_app.middleware('http')(middleware.auth)
    api_app.include_router(_bootstrap_router())
    api_app.request_adapter = zodchy_fastapi.request.Adapter(
        query_notation_parser=zodchy_notations.query.math.Parser()
    )
    api_app.response_adapter = zodchy_fastapi.response.Adapter(
        picker=picker,
        default_response_class=contracts.payload.ORJSONResponse
    )
    {% if need_authentication %}
    api_app.jwt_secret = jwt_secret
    {% endif %}
    api_app.cqrs_factory = cqrs_factory
    return api_app


def _bootstrap_router(api_version: str = 'v1'):
    if api_version == 'v1':
        router = routes.v1
        return router


def _bootstrap_exception_handlers(
    api_app: contracts.Application
) -> contracts.Application:
    api_app.add_exception_handler(
        RequestValidationError,
        zodchy_fastapi.middleware.validation_exception_handler
    )
    api_app.add_exception_handler(
        Exception,
        zodchy_fastapi.middleware.generic_exception_handler
    )
    return api_app
