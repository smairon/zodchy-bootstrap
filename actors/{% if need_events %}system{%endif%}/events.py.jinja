import collections.abc
import uuid

import hermitage
from zodchy import codex

import specs
from ports.rdbs import schema

# Add here functions to extract context from events to store it with event
context_extractor_registry = {
    {% if need_acme %}specs.messages.UpdateItem: lambda m: {'name': m.name, 'state': m.state.value}, {% endif %}
}


async def event_keeper(
    events: collections.abc.Iterable[codex.cqea.Event],
    client: specs.contracts.WriteClientContract,
):
    data = []
    for event in events:
        for _type in type(event).__mro__:
            if executor := context_extractor_registry.get(_type):
                data.append(
                    hermitage.notation.Item(
                        dict(
                            id=uuid.uuid4(),
                            name=_type.__name__,
                            **executor(event)
                        )
                    )
                )
    if data:
        invoice = specs.patterns.WriteInvoice(
            schema.event.name,
            *data
        )
        await client(invoice)
